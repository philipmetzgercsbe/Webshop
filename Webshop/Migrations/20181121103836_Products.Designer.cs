// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Webshop.Models;

namespace Webshop.Migrations
{
    [DbContext(typeof(WebshopContext))]
    [Migration("20181121103836_Products")]
    partial class Products
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.1.4-rtm-31024")
                .HasAnnotation("Relational:MaxIdentifierLength", 128)
                .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Name")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("RoleId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUser", b =>
                {
                    b.Property<string>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int>("AccessFailedCount");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken();

                    b.Property<string>("Discriminator")
                        .IsRequired();

                    b.Property<string>("Email")
                        .HasMaxLength(256);

                    b.Property<bool>("EmailConfirmed");

                    b.Property<bool>("LockoutEnabled");

                    b.Property<DateTimeOffset?>("LockoutEnd");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256);

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256);

                    b.Property<string>("PasswordHash");

                    b.Property<string>("PhoneNumber");

                    b.Property<bool>("PhoneNumberConfirmed");

                    b.Property<string>("SecurityStamp");

                    b.Property<bool>("TwoFactorEnabled");

                    b.Property<string>("UserName")
                        .HasMaxLength(256);

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.ToTable("AspNetUsers");

                    b.HasDiscriminator<string>("Discriminator").HasValue("IdentityUser");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<string>("ClaimType");

                    b.Property<string>("ClaimValue");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderKey")
                        .HasMaxLength(128);

                    b.Property<string>("ProviderDisplayName");

                    b.Property<string>("UserId")
                        .IsRequired();

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("RoleId");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles");
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.Property<string>("UserId");

                    b.Property<string>("LoginProvider")
                        .HasMaxLength(128);

                    b.Property<string>("Name")
                        .HasMaxLength(128);

                    b.Property<string>("Value");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens");
                });

            modelBuilder.Entity("Webshop.Models.Cart", b =>
                {
                    b.Property<long>("CartID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<int>("ProductAmount");

                    b.Property<string>("UserId");

                    b.HasKey("CartID");

                    b.HasIndex("UserId");

                    b.ToTable("Carts");
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.Property<long>("ProductID")
                        .ValueGeneratedOnAdd()
                        .HasAnnotation("SqlServer:ValueGenerationStrategy", SqlServerValueGenerationStrategy.IdentityColumn);

                    b.Property<long?>("CartID");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(500);

                    b.Property<string>("Imagepath")
                        .IsRequired();

                    b.Property<string>("Name")
                        .IsRequired();

                    b.Property<double>("Price");

                    b.Property<int>("Stock");

                    b.HasKey("ProductID");

                    b.HasIndex("CartID");

                    b.ToTable("Products");

                    b.HasData(
                        new { ProductID = 1L, Description = @"Aut ex minima nostrum commodi aut.
Eligendi atque inventore repellendus voluptas in minus.
Neque aliquam dolor doloribus.
Ex magnam molestias ut aut tempora qui enim.
Molestiae et quam ab alias ut in.", Imagepath = "http://lorempixel.com/640/480/city", Name = "commodi", Price = 211.25242488936169, Stock = 690 },
                        new { ProductID = 2L, Description = "Ducimus odio inventore sunt rerum id officiis aut. Est voluptatibus beatae eos pariatur perferendis corrupti. Porro nostrum amet illo.", Imagepath = "http://lorempixel.com/640/480/abstract", Name = "eos", Price = 35.206429959370958, Stock = 363 },
                        new { ProductID = 3L, Description = "Voluptatem error rerum molestiae necessitatibus quaerat in.", Imagepath = "http://lorempixel.com/640/480/food", Name = "ad", Price = 15.746378233538184, Stock = 828 },
                        new { ProductID = 4L, Description = "Voluptatem vel minus et molestiae atque qui fugiat. Consequatur ut molestias voluptates. Enim architecto repellendus optio aliquam asperiores iste. Eveniet voluptas explicabo qui veniam temporibus sit. Repellat sapiente qui iste id possimus harum quia.", Imagepath = "http://lorempixel.com/640/480/animals", Name = "maxime", Price = 118.35278564056046, Stock = 901 },
                        new { ProductID = 5L, Description = "In eum aliquid sapiente placeat facere sapiente odio.", Imagepath = "http://lorempixel.com/640/480/nightlife", Name = "aut", Price = 124.73273135476407, Stock = 710 },
                        new { ProductID = 6L, Description = "Aut aut sed itaque est laudantium consequatur iure et aliquid.", Imagepath = "http://lorempixel.com/640/480/sports", Name = "architecto", Price = 219.91063452600997, Stock = 554 },
                        new { ProductID = 7L, Description = "ex", Imagepath = "http://lorempixel.com/640/480/fashion", Name = "dignissimos", Price = 28.953637773615142, Stock = 70 },
                        new { ProductID = 8L, Description = "quo", Imagepath = "http://lorempixel.com/640/480/cats", Name = "sit", Price = 117.93435276669186, Stock = 322 },
                        new { ProductID = 9L, Description = "Officiis deleniti delectus ad nam ut. Optio rerum quo eveniet et. Praesentium repellat vitae adipisci. Eum eius qui mollitia consequatur. Eius omnis voluptatem harum aut eveniet numquam.", Imagepath = "http://lorempixel.com/640/480/food", Name = "ipsa", Price = 170.41591704237084, Stock = 452 },
                        new { ProductID = 10L, Description = "Dolor laboriosam vero distinctio dolorem. Veniam quidem alias magnam. Labore nulla consequuntur qui laboriosam quia. Rem vel illo necessitatibus aut. Illum ab fuga eius dolor ut velit consequuntur. Sint non quae ea.", Imagepath = "http://lorempixel.com/640/480/abstract", Name = "et", Price = 121.0275218030566, Stock = 432 }
                    );
                });

            modelBuilder.Entity("Webshop.Models.User", b =>
                {
                    b.HasBaseType("Microsoft.AspNetCore.Identity.IdentityUser");

                    b.Property<long>("UserID");

                    b.ToTable("User");

                    b.HasDiscriminator().HasValue("User");

                    b.HasData(
                        new { Id = "af3716e4-52fb-4d1b-b9ae-dcaa77fc43e3", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 1L },
                        new { Id = "0685782e-7179-4c9b-a629-ca316988c726", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 2L },
                        new { Id = "36a731d3-1174-44e3-9e99-7db6a0a80d27", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 3L },
                        new { Id = "194455a6-8916-435b-8e29-deda1fc8b6db", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 4L },
                        new { Id = "5d966aba-9236-41c2-ae26-ff7589347669", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 5L },
                        new { Id = "df72fc9b-ecfb-461b-8033-1478c4946be7", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 6L },
                        new { Id = "1b3438d6-7fcb-4cf4-b94c-8d9c8de07ec5", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 7L },
                        new { Id = "14a695e7-e7b5-4ad9-b2cd-6084247031e9", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 8L },
                        new { Id = "16763d1b-1d19-4a73-909f-e8b063287814", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 9L },
                        new { Id = "6b55b147-7fa1-4ef3-b3eb-38aa6bcc0e12", AccessFailedCount = 0, EmailConfirmed = true, LockoutEnabled = false, PhoneNumberConfirmed = true, TwoFactorEnabled = false, UserID = 10L }
                    );
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole")
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade);

                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<string>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityUser")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade);
                });

            modelBuilder.Entity("Webshop.Models.Cart", b =>
                {
                    b.HasOne("Webshop.Models.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId");
                });

            modelBuilder.Entity("Webshop.Models.Product", b =>
                {
                    b.HasOne("Webshop.Models.Cart")
                        .WithMany("Products")
                        .HasForeignKey("CartID");
                });
#pragma warning restore 612, 618
        }
    }
}
